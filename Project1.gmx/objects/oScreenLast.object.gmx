<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.drawpSurf=0
global.drawscreen=0
global.drawdarkSurf=0
global.drawpSurf2=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>return -1; 
with(oScreen)
{
    screen_w = 960//browser_height*(960/720)
    screen_h = 720//browser_height
    
    if (not surface_exists(pSurf)) pSurf = surface_create(screen_w, screen_h);
    if (not surface_exists(screen)) screen = surface_create(screen_w, screen_h);
    if (not surface_exists(darkSurf)) darkSurf = surface_create(screen_w, screen_h);
    
    if (checkBombPressed())
    {
        if (paused and global.plife &gt; 0 and isLevel())
        {
            instance_activate_all();
            paused = false;
            with oPlayer1
            {
                if (facing == 18) xVel = -3;
                else xVel = 3;
                yVel = -6;
                global.plife = -99;
            }
        
            if (SS_IsSoundPlaying(global.musTitle)) SS_SetSoundVol(global.musTitle, 2000 + 8000 * (global.musicVol/18));
            if (SS_IsSoundPlaying(global.musCave)) SS_SetSoundVol(global.musCave, 2000 + 8000 * (global.musicVol/18));
            if (SS_IsSoundPlaying(global.musLush)) SS_SetSoundVol(global.musLush, 2000 + 8000 * (global.musicVol/18));
            if (SS_IsSoundPlaying(global.musIce)) SS_SetSoundVol(global.musIce, 2000 + 8000 * (global.musicVol/18));
            if (SS_IsSoundPlaying(global.musTemple)) SS_SetSoundVol(global.musTemple, 2000 + 8000 * (global.musicVol/18));
            if (SS_IsSoundPlaying(global.musBoss)) SS_SetSoundVol(global.musBoss, 2000 + 8000 * (global.musicVol/18));
            
            if (not global.hasAnkh) stopAllMusic();
        }
    }
    
    else if (checkRopePressed())
    {
        if (paused)
            game_end2();
    }
    /*else if (checkStartPressed())
    {
        if (not paused and canPause)
        {
            if (instance_exists(oPlayer1))
            {
                if (not oPlayer1.dead)
                {
                    surface_set_target(pSurf);
                    
                    if (global.darkLevel) draw_set_alpha(1);
                    else draw_set_alpha(0.9);
                    draw_set_color(c_black);
                    draw_rectangle(0, 0, screen_w*screen_scale, screen_h*screen_scale, false);
                    draw_set_alpha(1);
                    if (SS_IsSoundPlaying(global.musTitle)) SS_SetSoundVol(global.musTitle, 0);
                    if (SS_IsSoundPlaying(global.musCave)) SS_SetSoundVol(global.musCave, 0);
                    if (SS_IsSoundPlaying(global.musLush)) SS_SetSoundVol(global.musLush, 0);
                    if (SS_IsSoundPlaying(global.musIce)) SS_SetSoundVol(global.musIce, 0);
                    if (SS_IsSoundPlaying(global.musTemple)) SS_SetSoundVol(global.musTemple, 0);
                    if (SS_IsSoundPlaying(global.musBoss)) SS_SetSoundVol(global.musBoss, 0);
                    py = oPlayer1.y;
                    
                    //instance_deactivate_all(true);
                    with(all)
                    {
                        if object_index!=oGamepad
                        &amp;&amp; object_index!=oNAL
                        &amp;&amp; object_index!=oScreenFirst
                        &amp;&amp; object_index!=oScreenLast
                        &amp;&amp; object_index!=oScreen
                        {
                            instance_deactivate_object(id)
                        }
                    }
                    /*instance_activate_object(oGamepad);
                    instance_activate_object(oNAL);
                    instance_activate_object(oScreenFirst);
                    instance_activate_object(oScreenLast);
                    instance_activate_object(oScreen);
                    
                    paused = true;
                }
            }
        }
        else
        {
            instance_activate_all();
            if (SS_IsSoundPlaying(global.musTitle)) SS_SetSoundVol(global.musTitle, 2000 + 8000 * (global.musicVol/18));
            if (SS_IsSoundPlaying(global.musCave)) SS_SetSoundVol(global.musCave, 2000 + 8000 * (global.musicVol/18));
            if (SS_IsSoundPlaying(global.musLush)) SS_SetSoundVol(global.musLush, 2000 + 8000 * (global.musicVol/18));
            if (SS_IsSoundPlaying(global.musIce)) SS_SetSoundVol(global.musIce, 2000 + 8000 * (global.musicVol/18));
            if (SS_IsSoundPlaying(global.musTemple)) SS_SetSoundVol(global.musTemple, 2000 + 8000 * (global.musicVol/18));
            if (SS_IsSoundPlaying(global.musBoss)) SS_SetSoundVol(global.musBoss, 2000 + 8000 * (global.musicVol/18));
            paused = false;
        }
    }*/
    
    // this draws the surface on the screen
    surface_reset_target();
    draw_clear(0);
    if (paused)
    {
        //draw_surface_stretched(pSurf,screen_x,screen_y,window_get_width(),window_get_height());
        global.drawpSurf=1
    }
    else
    {
        if (isRoom("rTitle"))
        {
            surface_set_target(screen);
            draw_set_alpha(oTitle.darkness);
            draw_set_color(c_black);
    
            draw_set_alpha(1);
            surface_reset_target();
        }
        else if (isLevel() and instance_exists(oPlayer1))
        {
            if (global.darkLevel and not oPlayer1.dead)
            {
                surface_set_target(darkSurf);
                draw_set_color(c_black);
                draw_rectangle(0, 0, screen_w, screen_h, false);
                draw_set_color(make_color_rgb(255-255*oLevel.darkness,255-255*oLevel.darkness,255));
                if (instance_exists(oLampRed))
                {
                    with oPlayer1
                    {
                        distToLamp = distance_to_object(oLampRed);
                        if (distToLamp &lt;= 96)
                        {
                            draw_set_color(make_color_rgb(255-distToLamp,120-(96-distToLamp),120-(96-distToLamp)));
                        }
                    }
                }
                if (instance_exists(oLampRedItem))
                {
                    with oPlayer1
                    {
                        distToLamp = distance_to_object(oLampRedItem);
                        if (distToLamp &lt;= 96)
                        {
                            draw_set_color(make_color_rgb(255-distToLamp,120-(96-distToLamp),120-(96-distToLamp)));
                        }
                    }
                }
                draw_circle(oPlayer1.x-view_xview[0], oPlayer1.y-view_yview[0], 96-64*oLevel.darkness, false);
                with oFlare
                {
                    draw_circle(x-view_xview[0], y-view_yview[0], 96, false);
                }
                with oFlareCrate
                {
                    draw_circle(x-view_xview[0], y-view_yview[0], 96, false);
                }
                with oLamp
                {
                    draw_circle((x+8)-view_xview[0], (y+8)-view_yview[0], 96, false);
                }
                with oLampItem
                {
                    draw_circle(x-view_xview[0], (y-4)-view_yview[0], 96, false);
                }
                with oArrowTrapLeftLit
                {
                    draw_circle((x+8)-view_xview[0], (y+8)-view_yview[0], 32, false);
                }
                with oArrowTrapRightLit
                {
                    draw_circle((x+8)-view_xview[0], (y+8)-view_yview[0], 32, false);
                }
                with oTikiTorch
                {
                    draw_circle((x+8)-view_xview[0], (y+8)-view_yview[0], 32, false);
                }
                with oFireFrog
                {
                    draw_circle((x+8)-view_xview[0], (y+8)-view_yview[0], 32, false);
                }
                with oSpearTrapLit
                {
                    draw_circle((x+8)-view_xview[0], (y+8)-view_yview[0], 32, false);
                }
                with oSmashTrapLit
                {
                    draw_circle((x+8)-view_xview[0], (y+8)-view_yview[0], 32, false);
                }
                with oExplosion
                {
                    draw_circle(x-view_xview[0], y-view_yview[0], 96, false);
                }
                with oLava
                {
                    draw_circle((x+8)-view_xview[0], (y+8)-view_yview[0], 32, false);
                }
                with oScarab
                {
                    draw_circle((x+8)-view_xview[0], (y+8)-view_yview[0], 16, false);
                }
                with oGhost
                {
                    draw_circle((x+16)-view_xview[0], (y+16)-view_yview[0], 64, false);
                }
                //surface_set_target(screen);
            }
            surface_reset_target();
        }
    
        // DFK
        // draw_set_blend_mode_ext(bm_one, bm_zero); // According to ChevyRay, this should fix the black box glitch
        if view_current=0
        {
            global.drawscreen=1
            //draw_surface_stretched(screen,screen_x,screen_y,screen_w*screen_scale,screen_h*screen_scale);
        }
        // DFK
        // draw_set_blend_mode(bm_normal); // According to ChevyRay, this should fix the black box glitch
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>return -1;
with(oScreen)
{
    var scwidth=browser_height*(960/720)
    var scheight=browser_height
    
    /*if global.drawscreen
    {
        draw_surface_stretched(screen,screen_x,screen_y,scwidth,scheight);
    }*/
    if global.pSurf2
    {
        draw_clear(0)
        draw_surface_stretched(pSurf,screen_x,screen_y,window_get_width(),window_get_height());
        //global.drawpSurf=1
        //draw_surface_stretched(pSurf,screen_x,screen_y,scwidth,scheight);
    }
    /*if global.drawdarkSurf
    {
        draw_surface_stretched(darkSurf,screen_x,screen_y,scwidth,scheight);
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(oScreen)
{
    screen_w = 320//960//browser_height*(960/720)
    screen_h = 240//720//browser_height
    
    global.pSurf2=0
    
    if (not surface_exists(pSurf)) pSurf = surface_create(screen_w, screen_h);
    if (not surface_exists(screen)) screen = surface_create(screen_w, screen_h);
    if (not surface_exists(darkSurf)) darkSurf = surface_create(screen_w, screen_h);
        
    if (checkStartPressed())
    {
        if (not paused and canPause)
        {
            if (instance_exists(oPlayer1))
            {
                if (not oPlayer1.dead)
                {
                    surface_set_target(pSurf);
                    
                    if (global.darkLevel) draw_set_alpha(1);
                    else draw_set_alpha(0.9);
                    draw_set_color(c_black);
                    draw_rectangle(0, 0, screen_w*screen_scale, screen_h*screen_scale, false);
                    draw_set_alpha(1);
                    if (SS_IsSoundPlaying(global.musTitle)) SS_SetSoundVol(global.musTitle, 0);
                    if (SS_IsSoundPlaying(global.musCave)) SS_SetSoundVol(global.musCave, 0);
                    if (SS_IsSoundPlaying(global.musLush)) SS_SetSoundVol(global.musLush, 0);
                    if (SS_IsSoundPlaying(global.musIce)) SS_SetSoundVol(global.musIce, 0);
                    if (SS_IsSoundPlaying(global.musTemple)) SS_SetSoundVol(global.musTemple, 0);
                    if (SS_IsSoundPlaying(global.musBoss)) SS_SetSoundVol(global.musBoss, 0);
                    py = oPlayer1.y;
                    
                    //instance_deactivate_all(true);
                    with(all)
                    {
                        if object_index!=oGamepad
                        &amp;&amp; object_index!=oNAL
                        &amp;&amp; object_index!=oScreenFirst
                        &amp;&amp; object_index!=oScreenLast
                        &amp;&amp; object_index!=oScreen
                        &amp;&amp; object_index!=yyScreen
                        {
                            instance_deactivate_object(id)
                        }
                    }
                    //instance_activate_object(oGamepad);
                    //instance_activate_object(oNAL);
                    //instance_activate_object(oScreenFirst);
                    //instance_activate_object(oScreenLast);
                    //instance_activate_object(oScreen);
                    
                    draw_set_font(global.myFont);
                    draw_set_color(c_white);
                    draw_text(112, 200, "PAUSED");
                    draw_set_font(global.myFontSmall);
                    if (isLevel())
                    {
                        n = 128-24;
                        if (global.currLevel &lt; 1) draw_text(40, n-24, "TUTORIAL CAVE");
                        else if (isRoom("rLoadLevel")) draw_text(40, n-24, "LEVEL: " + global.customLevelName + " BY " + global.customLevelAuthor);
                        else draw_text(40, n-24, "LEVEL " + string(global.currLevel));
                        draw_text(40, n-16, "DEPTH: " + string(174.8*(global.currLevel-1)+(py+8)*0.34) + " FEET");
                        draw_text(40, n, "MONEY: " + string(global.money));
                        draw_text(40, n+8, "KILLS: " + string(global.kills));
                        s = global.xtime;
                        s = floor(s / 1000);
                        m = 0;
                        while (s &gt; 59)
                        {
                            s -= 60;
                            m += 1;
                        }
                        if (s &lt; 10) str = "0" + string(s);
                        else str = string(s);
                        s2 = global.time;
                        s2 = floor(s2 / 1000);
                        m2 = 0;
                        while (s2 &gt; 59)
                        {
                            s2 -= 60;
                            m2 += 1;
                        }
                        if (s2 &lt; 10) str2 = "0" + string(s2);
                        else str2 = string(s2);
                        draw_text(40, n+16, "TIME:  " + string(m) + ":" + str + " / " + string(m2) + ":" + str2);
                        draw_text(40, n+24, "SAVES: " + string(global.damsels));
                        if (global.gamepadOn) draw_text(24, 216, "START-RETURN  BOMB-DIE  ROPE-QUIT/RESET");
                        else draw_text(40, 216, "ESC-RETURN  F1-DIE  F9-QUIT/RESET");
                    }
                    else
                    {
                        if (global.gamepadOn) draw_text(64, 216, "START-RETURN  ROPE-QUIT/RESET");
                        else draw_text(80, 216, "ESC-RETURN  F9-QUIT/RESET");
                    }
                    
                    surface_reset_target();
                    
                    global.pSurf2=1
                    //draw_surface_stretched(pSurf,screen_x,screen_y,window_get_width(),window_get_height());
                    //draw_surface_stretched(pSurf,screen_x,screen_y,screen_w*screen_scale*(window_get_width()/view_wview[0]),screen_h*screen_scale*(window_get_height()/view_hview[0]));
                    
                    //if view_current=0 draw_surface_stretched(pSurf,screen_x,screen_y,screen_w*screen_scale,screen_h*screen_scale);
                    
                    paused = true;
                }
            }
        }
        else
        {
            global.pSurf2=0
            
            instance_activate_all();
            if (SS_IsSoundPlaying(global.musTitle)) SS_SetSoundVol(global.musTitle, 2000 + 8000 * (global.musicVol/18));
            if (SS_IsSoundPlaying(global.musCave)) SS_SetSoundVol(global.musCave, 2000 + 8000 * (global.musicVol/18));
            if (SS_IsSoundPlaying(global.musLush)) SS_SetSoundVol(global.musLush, 2000 + 8000 * (global.musicVol/18));
            if (SS_IsSoundPlaying(global.musIce)) SS_SetSoundVol(global.musIce, 2000 + 8000 * (global.musicVol/18));
            if (SS_IsSoundPlaying(global.musTemple)) SS_SetSoundVol(global.musTemple, 2000 + 8000 * (global.musicVol/18));
            if (SS_IsSoundPlaying(global.musBoss)) SS_SetSoundVol(global.musBoss, 2000 + 8000 * (global.musicVol/18));
            paused = false;
        }
    
    }
    
    // this draws the surface on the screen
    //surface_reset_target();
    
    if (paused)
    {
        global.pSurf2=1
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("oScreenLast")
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
