<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sGiantSpiderFlip</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>40</depth>
  <persistent>0</persistent>
  <parentName>oEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>type = "Giant Spider";
makeActive();
setCollisionBounds(2, 16, 30, 32);
xVel = 0;
yVel = 0;
yDelta = -0.4;
myGrav = 0.3;
myGravNorm = 0.3;
image_speed = 0.8;

// stats
hp = 1;
invincible = 0;
whipped = 10;
squirtTimer = rand(100,1000);

// status
IDLE = 0;
BOUNCE = 1;
RECOVER = 2;
CRAWL = 3;
DROWNED = 4;
SQUIRT = 5;

status = 0;
bounceCounter = 0;

shakeCounter = 0;
shakeToggle = 1

playSound(global.sndGiantSpider);</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//sprite_index = sSpiderDrown;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index != sGiantSpiderSquirt)
{
    status = BOUNCE;
    sprite_index = sGiantSpiderJump;
    if (isCollisionBottom(1))
    {
        sprite_index = sGiantSpider;
        yVel = -1 * rand(2,5);
        if (oCharacter.x &lt; x+16)
        {
            xVel = -2.5;
        }
        else
        {
            xVel = 2.5;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((x &gt; view_xview[0]-32 and x &lt; view_xview[0] + view_wview[0] and
        y &gt; view_yview[0]-32 and y &lt; view_yview[0] + view_hview[0]))
{
moveTo(xVel,yVel);

yVel += myGrav;
if (yVel &gt; yVelLimit) yVel = yVelLimit;

if (whipped &gt; 0) whipped -= 1;

if (collision_point(x+16, y+24, oSolid, 0, 0))
{
    hp = 0;
}

if (hp &lt; 1)
{
    repeat(rand(1,3))
    {
        n = rand(1,3);
        switch (n)
        {
            case 1: { gem = instance_create(x+16, y+24, oEmeraldBig); break; }
            case 2: { gem = instance_create(x+16, y+24, oSapphireBig); break; }
            case 3: { gem = instance_create(x+16, y+24, oRubyBig); break; }
        }
        gem.xVel = rand(0,3) - rand(0,3);
        gem.yVel = -2;
    }
    obj = instance_create(x+16, y+24, oPaste);
    obj.cost = 0;
    obj.forSale = false;
    scrCreateBlood(x+16, y+24, 4);
    if (countsAsKill)
    {
        if (isRealLevel()) global.enemyKills[3] += 1;
        global.giantspiders += 1;
        global.kills += 1;
    }
    instance_destroy();
}

if (isCollisionRight(1))
{
    xVel = 1;
}

if (isCollisionLeft(1))
{
    xVel = -1;
}

if (isCollisionTop(1) and isCollisionBottom(1) and status != CRAWL)
{
    status = CRAWL;
    if (oCharacter.x &lt; x+16)
        xVel = -1;
    else
        xVel = 1;
}

dist = distance_to_object(oCharacter)

if (squirtTimer &gt; 0) squirtTimer -= 1;

if (status == IDLE)
{
    if (sprite_index != sGiantSpiderFlip) sprite_index = sGiantSpider;
    alarm[0] = rand(5,20);
    if (squirtTimer == 0) status = SQUIRT;
    else status = RECOVER;
}
else if (status == CRAWL)
{
    sprite_index = sGiantSpiderCrawl;
    if (not isCollisionTop(1) or not isCollisionBottom(1)) status = IDLE;
    else if (isCollisionRight(1)) xVel = -1;
    else if (isCollisionLeft(1)) xVel = 1;
}
else if (status == SQUIRT)
{
    sprite_index = sGiantSpiderSquirt;
    if (image_index &gt;= 5 and squirtTimer == 0)
    {
        instance_create(x+16, y+16, oWebBall);
        squirtTimer = rand(100,1000);
    }
}
else if (status == RECOVER)
{
    if (isCollisionBottom(1)) xVel = 0;
}
else if (status == BOUNCE and dist &lt; 120)
{
    sprite_index = sGiantSpiderJump;
    if (isCollisionBottom(1))
    {
        sprite_index = sGiantSpider;
        yVel = -1 * rand(3,6);
        if (oCharacter.x &lt; x+16)
        {
            xVel = -2.5;
        }
        else
        {
            xVel = 2.5;
        }
        playSound(global.sndSpiderJump);
        
        if (rand(1,4) == 1) { status = IDLE; xVel = 0; yVel = 0; }
    }
}
else if (status != DROWNED)
{
    status = IDLE;
    //xVel = 0;
}

if (isCollisionTop(1))
    yVel = 1;
/*
if (isCollisionLeft(1) or isCollisionRight(1))
{
    xVel = -xVel;
}
*/

//if (isCollisionSolid())
//  y -= 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oWhip">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (whipped == 0)
{
    hp -= 1;
    instance_create(x+16, y+24, oBlood);
    playSound(global.sndHit);
    whipped = 10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oCharacter">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// jumped on - oCaveman, oManTrap replaces this script with its own
if (abs(other.x-(x+16)) &gt; 16)
{
    // do nothing
}
else if (not other.dead and (other.state == 15 or other.state == 16) and other.y &lt; y+16 and not other.swimming)
{
    other.yVel = -6 - 0.2 * other.yVel;
    if (global.hasSpikeShoes) { hp -= (3 * (floor(other.fallTimer/16)+1)); if (not bloodless) instance_create(other.x, other.y+8, oBlood); }
    else hp -= (1 * (floor(other.fallTimer/16)+1));
    other.fallTimer = 0;
    instance_create(x+16, y+24, oBlood);
    playSound(global.sndHit);
}
else if (other.invincible == 0)
{
    if (true)
    {
        other.blink = 30
        other.invincible = 30
        if (other.y &lt; y)
            other.yVel = -6
        if (other.x &lt; x)
            other.xVel = -6
        else
            other.xVel = 6
    
        if (global.plife &gt; 0)
        {
            global.plife -= 2;
            if (global.plife &lt;= 0 and isRealLevel()) global.enemyDeaths[3] += 1;
        }
        playSound(global.sndHurt);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index == sGiantSpiderFlip)
{
    sprite_index = sGiantSpider;
    image_speed = 0.4;
}
else if (sprite_index == sGiantSpiderSquirt)
{
    status = IDLE;
    image_speed = 0.4;
}</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
