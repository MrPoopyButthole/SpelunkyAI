<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sSpearTrap1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>oSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fired = 0;
firedMax = 50;
prox = 4;
invincible = false;
image_speed = 0.5;
// alarm[0] = 50;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (not cleanDeath and not global.cleanSolids)
{
    rubble = instance_create(x+8+rand(0,8)-rand(0,8), y+8+rand(0,8)-rand(0,8), oRubble);
    rubble.sprite_index = sRubbleTan;
    rubble = instance_create(x+8+rand(0,8)-rand(0,8), y+8+rand(0,8)-rand(0,8), oRubbleSmall);
    rubble.sprite_index = sRubbleTanSmall;
    rubble = instance_create(x+8+rand(0,8)-rand(0,8), y+8+rand(0,8)-rand(0,8), oRubbleSmall);
    rubble.sprite_index = sRubbleTanSmall;
}

global.checkWater = true;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>arrow = instance_create(x-16, y+4, oArrow);
arrow.xVel = -5;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (fired &gt; 0) fired -= 1;

range = 64;

if (fired == 0 and abs(oPlayer1.y-y-8) &lt; prox and oPlayer1.x &lt; x and
    point_distance(x+8, y+8, oPlayer1.x, oPlayer1.y) &lt; range)
{
    instance_create(x-16, y, oSpearsLeft);
    fired = firedMax;
}

obj = instance_nearest(x, y, oEnemy);
if (obj) {
if (fired == 0 and abs(obj.y-y) &lt; prox and obj.x &lt; x and
    point_distance(x, y, obj.x, obj.y) &lt; range)
{
    instance_create(x-16, y, oSpearsLeft);
    fired = firedMax;
}}

obj = instance_nearest(x, y, oMoveableSolid);
if (obj) {
if (fired == 0 and abs(obj.y-y) &lt; prox and obj.x &lt; x and
    point_distance(x, y, obj.x, obj.y) &lt; range)
{
    instance_create(x-16, y, oSpearsLeft);
    fired = firedMax;
}}

obj = instance_nearest(x, y, oItem);
if (obj) {
if (fired == 0 and abs(obj.y-y-8) &lt; prox and obj.x &lt; x+8 and
    point_distance(x+8, y+8, obj.x, obj.y) &lt; range)
{
    instance_create(x-16, y, oSpearsLeft);
    fired = firedMax;
}}

// right

if (fired == 0 and abs(oPlayer1.y-y-8) &lt; prox and oPlayer1.x &gt; x+8 and
    point_distance(x+8, y+8, oPlayer1.x, oPlayer1.y) &lt; range)
{
    spears = instance_create(x+16, y, oSpearsLeft);
    spears.sprite_index = sSpearsRight;
    fired = firedMax;
}

obj = instance_nearest(x, y, oEnemy);
if (obj) {
if (fired == 0 and abs(obj.y-y) &lt; prox and obj.x &gt; x and
    point_distance(x, y, obj.x, obj.y) &lt; range)
{
    spears = instance_create(x+16, y, oSpearsLeft);
    spears.sprite_index = sSpearsRight;
    fired = firedMax;
}}

obj = instance_nearest(x, y, oMoveableSolid);
if (obj) {
if (fired == 0 and abs(obj.y-y) &lt; prox and obj.x &gt; x and
    point_distance(x, y, obj.x, obj.y) &lt; range)
{
    spears = instance_create(x+16, y, oSpearsLeft);
    spears.sprite_index = sSpearsRight;
    fired = firedMax;
}}

obj = instance_nearest(x, y, oItem);
if (obj) {
if (fired == 0 and abs(obj.y-y-8) &lt; prox and obj.x &gt; x+8 and
    point_distance(x+8, y+8, obj.x, obj.y) &lt; range)
{
    spears = instance_create(x+16, y, oSpearsLeft);
    spears.sprite_index = sSpearsRight;
    fired = firedMax;
}}

if ((x &gt; view_xview[0]-8 and x &lt; view_xview[0] + view_wview[0]+8 and
        y &gt; view_yview[0]-8 and y &lt; view_yview[0] + view_hview[0]+8))
{
if (not collision_point(x, y+16, oSolid, 0, 0))
{
    instance_destroy();
}
}</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
