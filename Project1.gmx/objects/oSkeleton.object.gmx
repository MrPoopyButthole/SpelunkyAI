<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sSkeletonCreateL</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>60</depth>
  <persistent>0</persistent>
  <parentName>oEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>makeActive();
setCollisionBounds(2, 0, 14, 16);
xVel = 0;
image_speed = 0.5;

// stats
type = "Skeleton";
hp = 1;
invincible = 0;

IDLE = 0;
WALK = 1;
ATTACK = 2;
STUNNED = 98;
DEAD = 99;
status = 0;

bloodless = true;
bounced = false;
dead = false;
counter = 20;

LEFT = 0;
RIGHT = 1;
facing = RIGHT;
if (instance_exists(oPlayer1))
{
    if (oPlayer1.x &lt; x+8) facing = LEFT;
}

shakeCounter = 0;
shakeToggle = 1;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((x &gt; view_xview[0]-20 and x &lt; view_xview[0] + view_wview[0]+4 and
        y &gt; view_yview[0]-20 and y &lt; view_yview[0] + view_hview[0]+4))
{
moveTo(xVel,yVel);

yVel += myGrav;
if (yVel &gt; yVelLimit) yVel = yVelLimit;

if (collision_point(x+8, y+8, oSolid, 0, 0))
{
    hp = 0;
}

if (hp &lt; 1)
{
    for (i = 0; i &lt; 3; i += 1)
    {
        instance_create(other.x+8, other.y+8, oBone);
    }
    skull = instance_create(other.x+8, other.y+8, oSkull);
    skull.yVel = -rand(1,3);
    skull.xVel = rand(0,3)-rand(0,3);
    if (countsAsKill)
    {
        if (isRealLevel()) global.enemyKills[5] += 1;
        global.skeletons += 1;
        global.kills += 1;
    }
    instance_destroy();
}

if (isCollisionBottom(1) and status != STUNNED)
    yVel = 0;

if (status == IDLE)
{
    if (counter &gt; 0) counter -= 1;    
    if (counter == 0)
    {
        // facing = rand(0,1);
        status = WALK;
    }
}
else if (status == WALK)
{
    colLeft = false;
    colRight = false;
    if (isCollisionLeft(1)) colLeft = true;
    if (isCollisionRight(1)) colRight = true;
    
    if (isCollisionLeft(4) and isCollisionRight(4))
    {
        // do nothing
    }
    else if (colLeft or colRight)
    {
        if (facing == LEFT) facing = RIGHT;
        else facing = LEFT;
    }
    /*
    if (facing == LEFT and not collision_point(x-1, y, oSolid, -1, -1) and
        not collision_point(x-1, y+16, oSolid, -1, -1))
    {
        facing = RIGHT;
    }
    else if (facing == RIGHT and not collision_point(x+16, y, oSolid, -1, -1) and
             not collision_point(x+16, y+16, oSolid, -1, -1))
    {
        facing = LEFT;
    }
    */
    
    if (facing == LEFT) xVel = -1;
    else xVel = 1;
    
    /*
    if (rand(1,100) == 1)
    {
        status = IDLE;
        counter = rand(20,50);
        xVel = 0;
    }
    */
}

if (isCollisionSolid())
    y -= 2;

if (status != STUNNED)
{
    if (status == WALK) sprite_index = sSkeletonWalkLeft;
    else sprite_index = sSkeletonLeft;
}
}</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
