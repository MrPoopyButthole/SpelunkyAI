<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sSmashTrap</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>60</depth>
  <persistent>0</persistent>
  <parentName>oMovingSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>makeActive();
setCollisionBounds(1, 1, 15, 15);
invincible = false;
viscidTop = 1;

xv = 0;
yv = 0;
xa = 0;
ya = 0;

xVel = 0;
yVel = 0;
xAcc = 0;
yAcc = 0;

IDLE = 0;
ATTACK = 1;
status = 0;

hit = false;
counter = 0;

dir = rand(0,3);
RIGHT = 0;
DOWN = 1;
LEFT = 2;
UP = 3;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (not cleanDeath and not global.cleanSolids)
{
    rubble = instance_create(x+8+rand(0,8)-rand(0,8), y+8+rand(0,8)-rand(0,8), oRubble);
    rubble.sprite_index = sRubbleTan;
    rubble = instance_create(x+8+rand(0,8)-rand(0,8), y+8+rand(0,8)-rand(0,8), oRubbleSmall);
    rubble.sprite_index = sRubbleTanSmall;
    rubble = instance_create(x+8+rand(0,8)-rand(0,8), y+8+rand(0,8)-rand(0,8), oRubbleSmall);
    rubble.sprite_index = sRubbleTanSmall;
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (x &gt; view_xview[0]-16 and x &lt; view_xview[0] + view_wview[0]+16 and
        y &gt; view_yview[0]-16 and y &lt; view_yview[0] + view_hview[0]+16)
{
if (status == IDLE)
{
    dist = point_distance(x, y, oCharacter.x, oCharacter.y);
    if (counter &gt; 0) counter -= 1;
        
    if (dist &lt; 90 and counter &lt; 1)
    {
        if (abs(oCharacter.y - (y+8)) &lt; 8 and oCharacter.x &gt; x+8 and not isCollisionRight(2))
        {
            status = ATTACK;
            dir = RIGHT;
            xa = 0.5;
        }
        else if (abs(oCharacter.x - (x+8)) &lt; 8 and oCharacter.y &gt; y+8 and not isCollisionBottom(2))
        {
            status = ATTACK;
            dir = DOWN;
            ya = 0.5;
        }
        else if (abs(oCharacter.y - (y+8)) &lt; 8 and oCharacter.x &lt; x+8 and not isCollisionLeft(2))
        {
            status = ATTACK;
            dir = LEFT;
            xa = -0.5;
        }
        else if (abs(oCharacter.x - (x+8)) &lt; 8 and oCharacter.y &lt; y+8 and not isCollisionTop(2))
        {
            status = ATTACK;
            dir = UP;
            ya = -0.5;
        }
    }
}
else if (status == ATTACK)
{
    colLeft = false;
    colRight = false;
    colTop = false;
    colBot = false;
    if (isCollisionLeft(1)) colLeft = true;
    if (isCollisionRight(1)) colRight = true;
    if (isCollisionTop(1)) colTop = true;
    if (isCollisionBottom(1)) colBot = true;

    if (abs(xv) &lt; 4) xv += xa;
    if (abs(yv) &lt; 4) yv += ya;
    x += xv;
    y += yv;
    if (dir == RIGHT)
    {
        if (isCollisionRight(2) and colRight)
        {
            x -= 2;
            hit = true;
        }
        if (colRight)
        {
            x -= 1;
            hit = true;
        }
    }
    else if (dir == DOWN)
    {
        if (isCollisionBottom(2) and colBot)
        {
            y -= 2;
            hit = true;
        }
        if (colBot)
        {
            y -= 1;
            hit = true;
        }
    }
    else if (dir == LEFT)
    {
        if (isCollisionLeft(2) and colLeft)
        {
            x += 2;
            hit = true;
        }
        if (colLeft)
        {
            x += 1;
            hit = true;
        }
    }
    else if (dir == UP)
    {
        if (isCollisionTop(2) and colTop)
        {
            y += 2;
            hit = true;
        }
        if (colTop)
        {
            y += 1;
            hit = true;
        }
    }
    
    if (collision_rectangle(x-1,y-1,x+17,y+17,oTombLord,0,0)) hit = true;
    
    if (hit)
    {
        xv = 0;
        yv = 0;
        xa = 0;
        ya = 0;
    }
    if (hit and not colRight and
        not colLeft and
        not colTop and
        not colBot)
    {
        status = IDLE;
        hit = false;
        counter = 50;
    }
}
else if (status = 99)
{
    xv = 0;
    yv = 0;
    xa = 0;
    ya = 0;
    y += 0.05;
    if (collision_point(x, y-1, oLava, 0, 0)) instance_destroy();
}

if (collision_rectangle(x+1, y+1, x+15, y+15, oLava, 0, 0))
{
    status = 99;
}}</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
