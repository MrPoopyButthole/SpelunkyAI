<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBatHang</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>40</depth>
  <persistent>0</persistent>
  <parentName>oEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bat_path = path_add();
image_speed = 0.5
setCollisionBounds(2, 2, 14, 14)
origX = 0
origY = 0
xVel = 0
yVel = 0
xAcc = 0.2
yAcc = 0.2

// stats
hp = 1;
invincible = 0
flying = true;

// status
HANG = 0
ATTACK = 1

status = HANG

shakeCounter = 0
shakeToggle = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>path_end();
if ((x &gt; view_xview[0]-20 and x &lt; view_xview[0] + view_wview[0]+4 and
        y &gt; view_yview[0]-20 and y &lt; view_yview[0] + view_hview[0]+4))        
{
    //playSound(global.sndBat);
}

if mp_grid_path(global.level_path_grid, bat_path, x+8, y+8, oPlayer1.x, oPlayer1.y,1 )
{
    status = ATTACK;
    path_start(bat_path, 1, 3, 0);
}
else
{
    status = HANG;
}
if (hp &lt; 1)
{
    scrCreateBlood(x+8, y+8, 3);
    if (countsAsKill)
    {
        if (isRealLevel()) global.enemyKills[0] += 1;
        global.bats += 1;
        global.kills += 1;
    }
    instance_destroy();
}

//moveTo(xVel, yVel);

if (collision_point(x+8, y+8, oSolid, 0, 0)) hp = -999;


dir = 0
dist = point_distance(x+8, y+8, oPlayer1.x, oPlayer1.y)

if (status == HANG)
{
  if (not oPlayer1.swimming and not oPlayer1.dead and
      ((dist &lt; 90 and oPlayer1.y &gt; y + 16) or not collision_point(x+8, y-1, oSolid, 0, 0)))
  {
    status = ATTACK;
    playSound(global.sndBat);
  }
  
  sprite_index = sBatHang
}
else if (instance_exists(oPlayer1) and not oPlayer1.swimming and not oPlayer1.dead)
{
    if (dist &lt; 160)
    {
        dir = point_direction(x+8, y+8, oPlayer1.x, oPlayer1.y)
        if (isCollisionRight(1) and oPlayer1.x &gt; x+8)
        {
            if (oPlayer1.y &lt; y+8) dir = 90;
            else dir = 270;
        }
        if (isCollisionLeft(1) and oPlayer1.x &lt; x+8)
        {
            if (oPlayer1.y &lt; y+8) dir = 90;
            else dir = 270;
        }
        if (isCollisionTop(1) and oPlayer1.y &lt; y+8 and abs(oPlayer1.x - x) &gt; 8)
        {
            if (oPlayer1.x &lt; x+8) dir = 180;
            else dir = 0;
        }
        if (isCollisionBottom(1) and oPlayer1.y &gt; y+8 and abs(oPlayer1.x - x) &gt; 8)
        {
            if (oPlayer1.x &lt; x+8) dir = 180;
            else dir = 0;
        }
        
        if (collision_point(x+8, y+16, oWater, 0, 0) and dir &gt; 180 and dir &lt; 360)
        {
            dir = 90;
        }
        
        if (not collision_point(x, y+12, oWater, 0, 0) or oPlayer1.y &lt; y)
        {
            xVel = 1 * cos(degtorad(dir));
            yVel = -1 * sin(degtorad(dir));
        }
    }
    else
    {
        if (collision_point(x+8, y-1, oSolid, 0, 0)) status = HANG;
        else
        {
            dir = 90;
            xVel = 1 * cos(degtorad(dir));
            yVel = -1 * sin(degtorad(dir));  
        }
    }
  
    if (oPlayer1.x &lt; x+8)
        sprite_index = sBatLeft
    else
        sprite_index = sBatRight
}
else
{
    if (collision_point(x+8, y-1, oSolid, 0, 0)) status = HANG;
    else
    {
        dir = 90;
        xVel = 1 * cos(degtorad(dir));
        yVel = -1 * sin(degtorad(dir));  
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (facing == RIGHT) draw_sprite_ext(sprite_index, image_index, x+16, y, -1, image_yscale, image_angle, c_red, image_alpha);
else draw_sprite_ext(sprite_index, image_index, x, y, 1, image_yscale, image_angle, c_red, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
