<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sMonkeyLeft</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>40</depth>
  <persistent>0</persistent>
  <parentName>oEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>type = "Monkey";
makeActive()
setCollisionBounds(4, 6, 12, 16)
xVel = 0
yVel = 0
yDelta = -0.4
myGrav = 0.2;
image_speed = 0.4

// stats
hp = 1;
invincible = 0;

LEFT = 0;
RIGHT = 1;
facing = rand(0,1);

// status
IDLE = 0
BOUNCE = 1
RECOVER = 2
WALK = 3
DROWNED = 4;
HANG = 5;
CLIMB = 6;
GRAB = 7;
status = HANG;

grabX = 0;
grabY = 0;
grabCounter = 0;

UP = 0;
DOWN = 1;
dir = 0;

counter = 0;
bounceCounter = 0
vineCounter = 0;
throwCounter = 60;

shakeCounter = 0
shakeToggle = 1

if (collision_point(x, y, oWater, 0, 0)) swimming = true;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((x &gt; view_xview[0]-20 and x &lt; view_xview[0] + view_wview[0]+4 and
        y &gt; view_yview[0]-20 and y &lt; view_yview[0] + view_hview[0]+4))
{
depth = 40;

moveTo(xVel,yVel);


if (status != HANG and status != CLIMB and status != GRAB) yVel += myGrav;
if (yVel &gt; yVelLimit) yVel = yVelLimit;

if (collision_point(x+8, y+8, oSolid, 0, 0)) hp = -999;

if (collision_point(x+8, y+8, oWater, -1, -1))
{
    if (not swimming)
    {
        instance_create(x+8, y, oSplash);
        swimming = true;
        playSound(global.sndSplash);
    }
}
else
{
    swimming = false;
}

if (hp &lt; 1)
{
    scrCreateBlood(x+8, y+8, 3);
    if (countsAsKill)
    {
        if (isRealLevel()) global.totalMonkeyKills += 1; // this is for stats
        global.monkeys += 1;
        global.kills += 1;
    }
    instance_destroy();
}

if (isCollisionRight(1))
{
    xVel = -1;
}

if (isCollisionLeft(1))
{
    xVel = 1;
}

colBot = false;
if (isCollisionBottom(1)) colBot = true;

if (grabCounter &gt; 0) grabCounter -= 1;
if (vineCounter &gt; 0) vineCounter -= 1;
if (throwCounter &gt; 0) throwCounter -= 1;

dist = distance_to_object(oCharacter)

if (status == IDLE)
{
    xVel = 0;
    if (counter &gt; 0) counter -= 1;
    else status = WALK;
    if (dist &lt; 64) status = BOUNCE;
    //if (status == BOUNCE) playSound(global.sndFrog);
}
else if (status == WALK)
{
    if (isCollisionLeft(1) or isCollisionRight(1))
    {
        if (facing == LEFT) facing = RIGHT;
        else facing = LEFT;
    }
    
    if (facing == LEFT)
    {
        xVel = -2;
    }
    else
    {
        xVel = 2;
    }
    
    if (rand(1,100) == 1)
    {
        status = IDLE;
        counter = rand(20,50);
        xVel = 0;
    }
}
else if (status == RECOVER)
{
    if (colBot)
    {
        status = IDLE;
        xVel = 0;
        yVel = 0;
        counter = rand(10,40);
    }
    else if (isCollisionLadder())
    {
        if (vineCounter == 0)
        {
            status = HANG;
            xVel = 0;
            yVel = 0;
            counter = rand(10,40);
        }
    }
}
else if (status == BOUNCE)
{
    if (colBot)
    {
        yVel = -1 * rand(4,5);
        if (oCharacter.x &lt; (x+8))
        {
            facing = LEFT;
            xVel = -2;
        }
        else
        {
            facing = RIGHT;
            xVel = 2;
        }
    }
    else
    {
        status = RECOVER;
        playSound(global.sndMonkey);
    }
}
else if (status == HANG)
{
    xVel = 0;
    yVel = 0;
    if (counter &gt; 0) counter -= 1;
    else
    {
        status = CLIMB;
        // dir = rand(0,1);
    }
}
else if (status == CLIMB)
{
    xVel = 0;
    if (dir == UP)
    {
        yVel = -1;
        if (not collision_point(x+8, y, oVine, 0, 0))
        {
            dir = DOWN;
            status = HANG;
            counter = rand(10,40);
        }
    }
    else
    {
        yVel = 1;
        if (not collision_point(x+8, y+22, oVine, 0, 0))
        {
            dir = UP;
            status = HANG;
            counter = rand(10,40);
        }
    }
    
    if (dist &lt; 64 and oCharacter.y &gt; y)
    {
        status = BOUNCE;
        vineCounter = 30;
        yVel = -1 * rand(2,4);
        if (oCharacter.x &lt; x)
        {
            facing = LEFT;
            xVel = -3;
        }
        else
        {
            facing = RIGHT;
            xVel = 3;
        }
    }
}
else if (status == GRAB)
{
    xVel = 0;
    yVel = 0;
    depth = 120;
    x = oPlayer1.x+grabX;
    y = oPlayer1.y+grabY;
    if (oPlayer1.facing == 18) facing = LEFT;
    else facing = RIGHT;
    if (counter &gt; 0) counter -= 1;
    else
    {
        n = 500+ceil(500 / 4)*global.levelType;
        if (rand(1,4) == 1)
        {
            // trip player
            with oPlayer1
            {
                if (facing == 18) xVel = -3;
                else xVel = 3;
                yVel = -3;
                stunned = true;
                stunTimer = 40;
                status = 16;
                if (holdItem)
                {
                    scrDropItem(0,0);
                    /*
                    if (holdItem.type == "Bow" and bowArmed)
                    {
                        scrFireBow();
                    }
                    else
                    {
                        holdItem.held = false;
                        holdItem = 0;
                        pickupItemType = "";
                    }
                    */
                }
            }
            playSound(global.sndHit);
        }
        else if (global.money &gt;= n and rand(1,10) &lt;= 8)
        {
            // throw out money
            global.money -= n;
            obj = instance_create(x, y, oGoldNugget);
            with obj
            {
                canCollect = false;
                alarm[0] = 20;
                xVel = rand(1,3)-rand(1,3);
                yVel = -rand(3,4);
            }
            playSound(global.sndThrow);
        }
        else if (rand(1,2) == 1 and global.rope &gt; 0)
        {
            // throw out rope
            global.rope -= 1;
            obj = instance_create(x, y, oRopeThrow);
            with obj
            {
                xVel = rand(1,3)-rand(1,3);
                yVel = -rand(3,4);
            }
            playSound(global.sndThrow);
        }
        else if (global.bombs &gt; 0)
        {
            // throw out bomb
            global.bombs -= 1;
            obj = instance_create(x, y, oBomb);
            if (rand(1,10) == 1)
            {
                obj.sprite_index = sBombArmed;
                obj.armed = true;
                obj.image_speed = 1;
                obj.alarm[1] = 40;
            }
            with obj
            {
                xVel = rand(1,3)-rand(1,3);
                yVel = -rand(3,4);
            }
            playSound(global.sndThrow);
                
        }
        status = BOUNCE;
        vineCounter = 20;
        yVel = -1 * rand(2,4);
        if (oCharacter.x &gt; (x+8))
        {
            facing = LEFT;
            xVel = -3;
        }
        else
        {
            facing = RIGHT;
            xVel = 3;
        }
        grabCounter = 60;
    }
}
else if (status != DROWNED)
{
    status = IDLE;
    xVel = 0;
}

if (status != GRAB and isCollisionTop(1))
    yVel = 1;

if (status == HANG) sprite_index = sMonkeyHangL;
else if (status == CLIMB or status == GRAB) sprite_index = sMonkeyClimbL;
else if (not colBot) sprite_index = sMonkeyJumpL;
else if (status == WALK) sprite_index = sMonkeyWalkL;
else sprite_index = sMonkeyLeft;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oItem">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (throwCounter == 0 and status != GRAB and other.active and not other.held)
{
    if (other.type == "Rope")
    {
        if (not other.falling)
        {
            if (facing == RIGHT) other.xVel = 5;
            else other.xVel = -5;
            other.yVel = -4;
            if (not collision_point(other.x, other.y, oSolid, 0, 0)) other.y = y-2
            throwCounter = 60;
            status = IDLE;
            counter = rand(20,60);
        }
    }
    else
    {
        if (facing == RIGHT) other.xVel = 5;
        else other.xVel = -5;
        other.yVel = -4;
        if (not collision_point(other.x, other.y-2, oSolid, 0, 0)) other.y -= 2;
        throwCounter = 60;
        status = IDLE;
        counter = rand(20,60);
    }
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oCharacter">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// jumped on - oCaveman, oManTrap replaces this script with its own
if (abs(other.x-(x+8)) &gt; 4 or status == GRAB)
{
    // do nothing
}
else if (not other.dead and (other.state == 15 or other.state == 16) and other.y &lt; y+2 and not other.swimming)
{
    other.yVel = -6 - 0.2 * other.yVel;
    other.fallTimer = 0;
    hp -= 1;
    playSound(global.sndHit);
}
else if (not other.invincible and grabCounter == 0)
{
    if ((y+8) &gt; oPlayer1.y+2) y = oPlayer1.y+2-8;
    if ((y+8) &lt; oPlayer1.y-2) y = oPlayer1.y-2-8;
    status = GRAB;
    xVel = 0;
    yVel = 0;
    grabX = x - oPlayer1.x;
    grabY = y - oPlayer1.y;
    counter = rand(40,80);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
