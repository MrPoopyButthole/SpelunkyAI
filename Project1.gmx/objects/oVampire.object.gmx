<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sVampireLeft</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>60</depth>
  <persistent>0</persistent>
  <parentName>oEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>makeActive();
setCollisionBounds(2, 0, sprite_width-2, sprite_height);
xVel = 2.5;
image_speed = 0.5;

// stats
type = "Vampire";
hp = 6;
invincible = 0;
myGrav = 0.2;
myGravNorm = 0.2;

IDLE = 0;
WALK = 1;
ATTACK = 2;
THROW = 3;
RECOVER = 4;
BOUNCE = 5;
HANG = 6;
FLY = 7;
STUNNED = 98;
DEAD = 99;
status = IDLE;

whipped = false;
bloodless = true;
bounced = false;
dead = false;
counter = 0;
stunTime = 60;
sightCounter = 0;

LEFT = 0;
RIGHT = 1;
facing = RIGHT;

shakeCounter = 0;
shakeToggle = 1;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>whipped = false;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((x &gt; view_xview[0]-20 and x &lt; view_xview[0] + view_wview[0]+4 and
        y &gt; view_yview[0]-20 and y &lt; view_yview[0] + view_hview[0]+4))
{
if (status == STUNNED) myGrav = 0.6;

moveTo(xVel,yVel);

colLeft = false;
colRight = false;
colBot = false;
colTop = false;
if (isCollisionLeft(1)) colLeft = true;
if (isCollisionRight(1)) colRight = true;
if (isCollisionBottom(1)) colBot = true;
if (isCollisionTop(1)) colTop = true;

if (not held and status != HANG and status != FLY) yVel += myGrav;
if (yVel &gt; yVelLimit) yVel = yVelLimit;

if (status &gt;= STUNNED)
{
    if (collision_point(x+8, y+12, oSolid, 0, 0))
    {
        instance_create(x+8, y+8, oSmokePuff);
        playSound(global.sndCavemanDie);
        instance_destroy();
    }
}
else if (not held)
{
    if (collision_point(x+8, y+8, oSolid, 0, 0))
    {
        instance_create(x+8, y+8, oSmokePuff);
        playSound(global.sndCavemanDie);
        instance_destroy();
    }
}

if (isCollisionBottom(1) and status != STUNNED)
    yVel = 0;

if (status != DEAD and status != STUNNED and hp &lt; 1)
{
    status = DEAD;
}

if (burning &gt; 0)
{
    if (rand(1,5) == 1) instance_create(x+rand(4,12), y+rand(4,12), oBurn);
    burning -= 1;
}

dist = distance_to_point(oPlayer1.x-8, oPlayer1.y-8);

if (status == IDLE)
{
    bounced = false;
    if (colBot and
        (collision_point(x-1, y, oSolid, -1, -1) or collision_point(x+16, y, oSolid, -1, -1)))
    {
        yVel = -6;
        if (facing == LEFT) xVel = -1;
        else xVel = 1;
        counter -= 10;
    }
    
    if (yVel &lt; 0 and isCollisionTop(1))
    {
        yVel = 0;
    }

    if (isCollisionBottom(1) and counter &gt; 0) counter -= 1;    
    if (counter &lt; 1)
    {
        facing = rand(0,1);
        status = WALK;
    }
    
    if (dist &lt; 96)
    {
        if (oPlayer1.x &lt; x+8) facing = LEFT;
        else if (oPlayer1.x &gt; x+8) facing = RIGHT;
        status = ATTACK;
    }
}
else if (status == WALK)
{
    if (isCollisionLeft(1) or isCollisionRight(1))
    {
        if (facing == LEFT) facing = RIGHT;
        else facing = LEFT;
    }
    
    if (not colBot)
    {
        // do nothing
    }
    else if (rand(1,100) == 1)
    {
        status = IDLE;
        counter = rand(20,50);
        xVel = 0;
    }
    else if (facing == LEFT)
    {
        xVel = -1.5;
        if (not collision_point(x-1, y+16, oSolid, -1, -1))
        {
            status = IDLE;
            counter = rand(20,50);
            xVel = 0;
            yVel = 0;
        }
    }
    else if (facing == RIGHT)
    {
        xVel = 1.5;
        if (not collision_point(x+16, y+16, oSolid, -1, -1))
        {
            status = IDLE;
            counter = rand(20,50);
            xVel = 0;
            yVel = 0;
        } 
    }
    
    if (dist &lt; 96) status = ATTACK;
}
else if (status == ATTACK)
{
    image_speed = 1;
    if (facing == LEFT and isCollisionLeft(4))
    {
        if (isCollisionTop(1)) facing = RIGHT;
        else status = BOUNCE;
    }
    else if (facing == RIGHT and isCollisionRight(4))
    {
        if (isCollisionTop(1)) facing = LEFT;
        else status = BOUNCE;
    }
    else if (facing == LEFT)
    {
        if (not collision_point(x-8, y+16, oSolid, 0, 0))
        {
            status = BOUNCE;
        }
    }
    else if (facing == RIGHT)
    {
        if (not collision_point(x+8, y+16, oSolid, 0, 0))
        {
            status = BOUNCE;
        }
    }
    
    if (abs(oPlayer1.x-x) &lt; 32 and oPlayer1.y &lt; y+8 and not collision_point(x+8, y+8, oWater, 0, 0)) status = FLY;
    
    if (facing == LEFT) xVel = -4;
    else xVel = 4;
}
else if (status == RECOVER)
{
    if (facing == LEFT and isCollisionLeft(1))
    {
        facing = RIGHT;
        xVel = -xVel;
    }
    else if (facing == RIGHT and isCollisionRight(1))
    {
        facing = LEFT;
        xVel = -xVel;
    }
    else if (colBot)
    {
        status = IDLE;
        xVel = 0;
        yVel = 0;
        counter = rand(40,100);
    }
    else if (not collision_point(x+8, y+8, oWater, 0, 0))
    {
        if (rand(1,100) == 1) status = FLY;
        else if (collision_point(x+8, y+24, oWater, 0, 0)) status = FLY;
    }
}
else if (status == BOUNCE)
{
    if (colBot)
    {
        yVel = -1 * rand(3,6);
    }
    else
    {
        status = RECOVER;
    }
}
else if (status == STUNNED)
{
    if (colBot)
    {
        // do nothing
    }
    else
    {
        if (xVel == 0 and hp &gt; 0) sprite_index = sVampireStunL;
        else if (bounced)
        {
            if (yVel &lt; 0) sprite_index = sVampireBounceL;
            else sprite_index = sVampireFallL;
        }
        else
        {
            if (abs(xVel) &gt; 0) sprite_index = sVampireDieLL;
            else sprite_index = sVampireDieLR;
        }
    }
    
    if (colBot and not bounced)
    {
        bounced = true;
        scrCreateBlood(x+8, y+8, 1);
    }
    
    if (held or colBot)
    {
        if (counter &gt; 0) counter -= 1;
        else if (hp &gt; 0)
        {
            status = IDLE;
            if (held)
            {
                held = false;
                with oPlayer1 { holdItem = 0; pickupItemType = ""; }
            }
        }
    }
}
else if (status == DEAD)
{
    repeat(3)
    {
        instance_create(other.x+8, other.y+8, oBone);
    }
    obj = instance_create(other.x+8, other.y+8, oSkull);
    obj.yVel = -rand(1,3);
    obj.xVel = rand(0,3)-rand(0,3);
    if (countsAsKill)
    {
        if (isRealLevel()) global.enemyKills[7] += 1;
        global.vampires += 1;
        global.kills += 1;
    }
    playSound(global.sndCavemanDie);
    obj = instance_create(x+8, y+8, oCapePickup);
    obj.cost = 0;
    obj.forSale = false;
    instance_destroy();
}
else if (status == HANG)
{
    xVel = 0;
    yVel = 0;

    if (not oPlayer1.dead and not oPlayer1.swimming and
        ((dist &lt; 90 and oPlayer1.y &gt; y + 16) or not collision_point(x+8, y-1, oSolid, 0, 0)))
    {
        status = FLY;
        playSound(global.sndBat);
    }
}
else if (status == FLY and instance_exists(oPlayer1) and not oPlayer1.swimming and not oPlayer1.dead)
{
    xVel = 0;
    yVel = 0;

    if (dist &lt; 160)
    {
        dir = point_direction(x+8, y+8, oPlayer1.x, oPlayer1.y)
        if (isCollisionRight(1) and oPlayer1.x &gt; x+8)
        {
            if (oPlayer1.y &lt; y+8) dir = 90;
            else dir = 270;
        }
        if (isCollisionLeft(1) and oPlayer1.x &lt; x+8)
        {
            if (oPlayer1.y &lt; y+8) dir = 90;
            else dir = 270;
        }
        if (isCollisionTop(1) and oPlayer1.y &lt; y+8 and abs(oPlayer1.x - x) &gt; 8)
        {
            if (oPlayer1.x &lt; x+8) dir = 180;
            else dir = 0;
        }
        if (isCollisionBottom(1) and oPlayer1.y &gt; y+8 and abs(oPlayer1.x - x) &gt; 8)
        {
            if (oPlayer1.x &lt; x+8) dir = 180;
            else dir = 0;
        }
        
        if (collision_point(x+8, y+16, oWater, 0, 0) and dir &gt; 180 and dir &lt; 360)
        {
            dir = 90;
        }
        
        if (not collision_point(x, y+12, oWater, 0, 0) or oPlayer1.y &lt; y)
        {
            xVel = 2 * cos(degtorad(dir));
            yVel = -2 * sin(degtorad(dir));
        }
    }
    else
    {
        if (collision_point(x+8, y-1, oSolid, 0, 0)) status = HANG;
        else
        {
            dir = 90;
            xVel = 2 * cos(degtorad(dir));
            yVel = -2 * sin(degtorad(dir));  
        }
    }
    
    if (oPlayer1.x &lt; x+8) facing = LEFT;
    else facing = RIGHT;

    if (colBot or collision_point(x, y, oWater, 0, 0))
    {
        status = IDLE;
    }
}
else if (status == FLY)
{
    xVel = 0;
    yVel = 0;
    
    if (collision_point(x+8, y-1, oSolid, 0, 0)) status = HANG;
    else
    {
        dir = 90;
        xVel = 1 * cos(degtorad(dir));
        yVel = -1 * sin(degtorad(dir));  
    }
}

if (status &gt;= STUNNED)
{
    scrCheckCollisions();
    
    if (xVel == 0 and yVel == 0 and hp &lt; 1) status = DEAD;
}

//if (isCollisionSolid()) y -= 2;

if (xVel &gt; 0) xVel -= 0.1;
if (xVel &lt; 0) xVel += 0.1;
if (abs(xVel) &lt; 0.5) xVel = 0;

if (status == HANG) sprite_index = sVampireBatHang;
else if (status &lt; STUNNED and status != THROW)
{
    if (status == FLY) sprite_index = sVampireBatLeft;
    else if (status == RECOVER) sprite_index = sVampireJumpL;
    else if (abs(xVel) &gt; 0) sprite_index = sVampireRunL;
    else sprite_index = sVampireLeft;
}
if (held)
{
    if (hp &gt; 0) sprite_index = sVampireHeldL;
    else sprite_index = sVampireDHeldL;
}
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oBlood">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp += 1;
with other { instance_destroy(); }</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oWhipPre">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (status &lt; STUNNED or other.type == "Machete")
{
    hp -= other.damage;
    scrCreateBlood(x+sprite_width/2, y+sprite_height/2, 1);
    countsAsKill = true;
    status = STUNNED;
    counter = stunTime;
    yVel = -3;
    if (other.x &lt; (x+8)) xVel = 2;
    else xVel = -2;
    image_speed = 0.5;
    playSound(global.sndHit);
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oWhip">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (status &lt; STUNNED or other.type == "Machete")
{
    hp -= other.damage;
    scrCreateBlood(x+sprite_width/2, y+sprite_height/2, 1);
    countsAsKill = true;
    status = STUNNED;
    counter = stunTime;
    yVel = -3;
    if (other.x &lt; (x+8)) xVel = 2;
    else xVel = -2;
    image_speed = 0.5;
    playSound(global.sndHit);
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oCharacter">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (abs(other.x-(x+8)) &gt; 8)
{
    // do nothing
}
else if (not other.dead and (other.state == 15 or other.state == 16) and other.y &lt; y+5 and not other.swimming)
{
    // Jumped on
    if (status &lt; STUNNED)
    {
        other.yVel=-6-0.2*other.yVel
        if (global.hasSpikeShoes) { hp -= (3 * (floor(other.fallTimer/16)+1)); if (not bloodless) instance_create(other.x, other.y+8, oBlood); }
        else hp -= (1 * (floor(other.fallTimer/16)+1));
        other.fallTimer = 0;
        countsAsKill = true;
        status = STUNNED;
        counter = stunTime;
        yVel = -6;
        if (other.x &lt; x+8) xVel += 1;
        else xVel -= 1;
        image_speed = 0.5;
        playSound(global.sndHit);
    }
}
else if (other.invincible == 0)
{
    if (status &lt; STUNNED)
    {
        other.blink = 30
        other.invincible = 30
        if (other.y &lt; y)
            other.yVel = -6
        if (other.x &lt; x)
            other.xVel = -6
        else
            other.xVel = 6
        instance_create(other.x, other.y, oBlood);
    
        if (global.plife &gt; 0) global.plife -= 1;
        playSound(global.sndHurt);
    }
}</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
